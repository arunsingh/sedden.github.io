<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stefan Jenkner]]></title>
  <link href="http://sedden.github.com/atom.xml" rel="self"/>
  <link href="http://sedden.github.com/"/>
  <updated>2013-03-25T12:38:16+01:00</updated>
  <id>http://sedden.github.com/</id>
  <author>
    <name><![CDATA[Stefan Jenkner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pros and cons using $::osfamily instead of $::operatingsystem Fact]]></title>
    <link href="http://sedden.github.com/archive/2013/03/27/use-osfamily-instead-of-operatingsystem/"/>
    <updated>2013-03-27T11:36:00+01:00</updated>
    <id>http://sedden.github.com/archive/2013/03/27/use-osfamily-instead-of-operatingsystem</id>
    <content type="html"><![CDATA[<p>Once you read the <a href="http://docs.puppetlabs.com/guides/style_guide.html">Puppet Style Guide</a>, you should know how to writing well structured manifests, with the modest indentation, spacing, arrow alignment, quoting and so on.
Well, I think there are lots of other things you <del>better</del> should care.
For this time, it&#8217;s about when to use <code>$::osfamily</code> and when better to stay with the <code>$::operatingsystem</code> fact.</p>

<h4>Pros</h4>

<p>The key benefit of using <code>$::osfamily</code> is that you don&#8217;t end up forking your favorite Puppet module on GitHub to add the eleventh RedHat derivate:</p>

<pre><code>case $::operatingsystem {
   'RedHat', 'CentOS', 'Scientific', . . . , 'OracleLinux', 'OEL': {
     # do something RHEL specific
   }
   'ubuntu', 'debian': {
     # do something Debian specific 
   }
   default: {
     # ...
   }
}
</code></pre>

<p>Instead you would use:</p>

<pre><code>case $::osfamily {
   'redhat': {
     # do something RHEL specific
   }
   'debian': {
     # do something Debian specific 
   }
   default: {
     # ...
   }
}
</code></pre>

<p>It allows you to write cleaner manifests and works well for common tasks.
You still have the choice to handle details via <code>$::operatingsystem</code> the more complex your classes become.</p>

<h4>Cons</h4>

<p>There are disadvantages of course: You claim tosupport an Operating-System you might haven&#8217;t even heard of.
But my experience is that most people are using the EPEL repositories anyway. So wouldn&#8217;t it be enough to test your modules against EPEL? And yes: you really should test your manifests!</p>

<h4>Support for Facter &lt; 1.6.1</h4>

<p>The <code>$::osfamily</code> fact was introduced with Facter 1.6.1. There is a simple workaround for older versions. I found this solution in the description of the <a href="https://github.com/puppetlabs/puppetlabs-mysql/">puppetlabs-mysql Module</a>. Just put this into your <code>site.pp</code> (before any node definition):</p>

<pre><code>if ! $::osfamily {
  case $::operatingsystem {
    'RedHat', 'Fedora', 'CentOS', 'Scientific', 'SLC', 'Ascendos', 'CloudLinux', 'PSBM', 'OracleLinux', 'OVS', 'OEL': {
      $osfamily = 'RedHat'
    }
    'ubuntu', 'debian': {
      $osfamily = 'Debian'
    }
    'SLES', 'SLED', 'OpenSuSE', 'SuSE': {
      $osfamily = 'Suse'
    }
    'Solaris', 'Nexenta': {
      $osfamily = 'Solaris'
    }
    default: {
      $osfamily = $::operatingsystem  
    }
  }
}
</code></pre>

<p>It defines <code>$::osfamily</code> if not available.</p>
]]></content>
  </entry>
  
</feed>
